#!/bin/bash

# set -x
set -e

HOMEBREW_PREFIX="$(brew config | grep HOMEBREW_PREFIX | awk '{print $2}')"
# fix for Intel chips and Arm chips
HOMEBREW_LIBRARY="${HOMEBREW_PREFIX}/Library"
if [ $HOMEBREW_PREFIX == '/usr/local' ]; then
  HOMEBREW_LIBRARY="${HOMEBREW_PREFIX}/Homebrew/Library"
fi

check_command_installed() {
  NAME=$1
  BREW_NAME=$2
  if ! [ -x "$(command -v $NAME)" ]; then
    echo "Error: Required GNU $NAME, try \`brew install $BREW_NAME\`"
    exit 1
  fi
}

get_version_by_info() {
  local __cask=$1
  local __info=$(brew info --cask $__cask)
  local __latest=$(echo $__info | head -n 1 | gsed 's/^==>//g' | awk '{print $2}')
  echo $__latest
}

get_first_letter() {
  local __input=$1
  echo ${__input:0:1}
}

get_versions_by_cat() {
  local __cask=$1
  local __sharding=$2
  if [ $__sharding == "true" ]; then
    letter=$(get_first_letter $__cask)
    local __latest=$(cat $HOMEBREW_LIBRARY/Taps/*/*/Casks/$letter/$__cask.rb | ggrep -Po 'version "\K[^"]+' | sort -r --version-sort)
  else
    local __latest=$(cat $HOMEBREW_LIBRARY/Taps/*/*/Casks/$__cask.rb | ggrep -Po 'version "\K[^"]+' | sort -r --version-sort)
  fi
  echo $__latest
}

if [ $(uname) = 'Darwin' ]; then
  check_command_installed ggrep grep
fi

for cask in $(ls $HOMEBREW_PREFIX/Caskroom); do
  sharding=false
  if [ ! -f $HOMEBREW_LIBRARY/Taps/*/*/Casks/$cask.rb ]; then
    letter=$(get_first_letter $cask)
    sharding=true
    if [ ! -f $HOMEBREW_LIBRARY/Taps/*/*/Casks/$letter/$cask.rb ]; then
      echo [Warning] Cannot find $cask, maybe this cask is not in casks!
      continue
    fi
  fi
  # echo $cask " sharding is " $sharding
  latest="$(get_versions_by_cat $cask $sharding)"
  lines="$(echo "$latest" | gsed "s/ /\n/g" | wc -l | awk '{print $1}')"
  # echo $lines
  if [ "$lines" -gt 1 ]; then
    # echo ">>> Multi $cask"
    latest="$(get_version_by_info $cask)"
  fi
  # echo ">>>> $latest"

  if [ ! -d "$HOMEBREW_PREFIX/Caskroom/$cask/$latest" ]; then
    echo "$cask latest: $latest, nothing in $HOMEBREW_PREFIX/Caskroom/$cask/$latest"
  fi
done
